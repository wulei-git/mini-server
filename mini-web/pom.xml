<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <!--
        parent 标签：
            1.创建一个parent项目，打包类型为pom，parent项目中不存放任何代码，只是管理多个项目之间公共的依赖。
            2.便于控制依赖框架的版本
    -->
    <parent>
        <groupId>com.init.mini</groupId>
        <artifactId>mini-server</artifactId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <!--
        groupId标签：
            1.公司或者组织的唯一标志
            2.并且配置时生成的路径也是由此生成，
            如com.companyname.project-group，maven会将该项目打成的jar
            包放本地路径：/com/companyname/project-group
     -->
    <groupId>com.init.mini.web</groupId>
    <!--
        artifactId：
            1.项目的唯一ID
            2.一个groupId下面可能多个项目，就是靠artifactId来区分的
    -->
    <artifactId>mini-web</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>mini-web</name>
    <description>Web project for Spring Boot</description>

    <!--
        maven构建生命周期：
            1.验证 validate	验证项目	验证项目是否正确且所有必须信息是可用的
            2.编译 compile	执行编译	源代码编译在此阶段完成
            3.测试 Test	测试	使用适当的单元测试框架（例如JUnit）运行测试。
            4.包装 package	打包	创建JAR/WAR包如在 pom.xml 中定义提及的包
            5.检查 verify	检查	对集成测试的结果进行检查，以保证质量达标
            6.安装 install	安装	安装打包的项目到本地仓库，以供其他项目使用
            7.部署 deploy	部署	拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程
    -->

    <dependencies>
        <dependency>
            <groupId>com.init.mini.common</groupId>
            <artifactId>mini-common</artifactId>
            <version>${mini-common.version}</version>
        </dependency>
        <!--
            父 pom 使用
            1.先在spring-boot-dependencies父 pom中查找是否存在需要的依赖
            2.父 pom 是模板，需要在子pom中添加才能生效
            3.父 pom 中的依赖默认为父依赖版本，无需写版本号，这也是 parent 标签的重大意义
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>${spring-boot-dependencies.version}</version>
        </dependency>

        <!--<dependency>-->
            <!--<groupId>org.springframework.boot</groupId>-->
            <!--<artifactId>spring-boot-starter-test</artifactId>-->
            <!--<scope>test</scope>-->
            <!--<exclusions>-->
                <!--&lt;!&ndash;-->
                    <!--exclusion：-->
                        <!--1.当计算传递依赖时，从依赖构件列表里，列出被排除的依赖构件集。-->
                        <!--2.即告诉maven你只依赖指定的项目，不依赖项目的依赖。-->
                        <!--3.此元素主要用于解决版本冲突问题-->
                <!--&ndash;&gt;-->
                <!--<exclusion>-->
                    <!--<groupId>org.junit.vintage</groupId>-->
                    <!--<artifactId>junit-vintage-engine</artifactId>-->
                <!--</exclusion>-->
            <!--</exclusions>-->
        <!--</dependency>-->

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>${fastjson.version}</version>
        </dependency>

        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>${mybatis-spring-boot-starter.version}</version>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql-connector-java.version}</version>
        </dependency>

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>${druid.version}</version>
        </dependency>

        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>${aspectjweaver.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
            <version>${spring-boot-starter-data-redis.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
            <version>${spring-cloud-starter-config.version}</version>
        </dependency>

        <!--
        注意：
            1.httpClien与feign版本之间的适配
            2.Dalston.SR5版本
                a.项目<artifactId>spring-cloud-starter-feign</artifactId>
                b.适配 HTTP 框架中间件 <groupId>com.netflix.feign</groupId>
                  <artifactId>feign-httpclient</artifactId>
            3.Greenwich.SR2版本
                a.项目<artifactId>spring-cloud-starter-openfeign</artifactId>
                b.适配 HTTP 框架中间件<groupId>io.github.openfeign</groupId>
                    <artifactId>feign-httpclient</artifactId>
        -->

        <!-- Ribbon相关 -->
        <!--<dependency>-->
            <!--<groupId>org.springframework.cloud</groupId>-->
            <!--<artifactId>spring-cloud-netflix-eureka-client</artifactId>-->
        <!--</dependency>-->

        <!--<dependency>-->
            <!--<groupId>org.springframework.cloud</groupId>-->
            <!--<artifactId>spring-cloud-starter-ribbon</artifactId>-->
        <!--</dependency>-->

        <!--<dependency>-->
            <!--<groupId>org.springframework.boot</groupId>-->
            <!--<artifactId>spring-boot-starter-actuator</artifactId>-->
        <!--</dependency>-->

        <!--<dependency>-->
            <!--<groupId>org.springframework.cloud</groupId>-->
            <!--<artifactId>spring-cloud-starter-netflix-hystrix</artifactId>-->
        <!--</dependency>-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.rocketmq</groupId>
            <artifactId>rocketmq-client</artifactId>
            <version>4.8.0</version>
        </dependency>

        <!--swagger-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.9.2</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.9.2</version>
        </dependency>


    </dependencies>

    <build>
        <plugins>
            <!--<plugin>-->
                <!--<groupId>org.apache.maven.plugins</groupId>-->
                <!--<artifactId>maven-resources-plugin</artifactId>-->
                <!--<version>2.1</version>-->
            <!--</plugin>-->
            <!--<plugin>-->
                <!--<groupId>org.springframework.boot</groupId>-->
                <!--&lt;!&ndash;-->
                    <!--spring-boot-maven-plugin插件：-->
                        <!--1.当运行“mvn package”进行打包时，会打包成一个可以直接运行的 JAR 文件-->
                        <!--2.使用“java -jar”命令就可以直接运行。-->
                        <!--3.不推荐用war，因为springboot适合前后端分离，打成jar进行部署更合适。-->
                <!--&ndash;&gt;-->
                <!--<artifactId>spring-boot-maven-plugin</artifactId>-->
                <!--<version>2.0.1.RELEASE</version>-->
            <!--</plugin>-->
            <plugin>
                <groupId>org.mybatis.generator</groupId>
                <artifactId>mybatis-generator-maven-plugin</artifactId>
                <version>1.3.7</version>
                <dependencies>
                    <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <version>8.0.22</version>

                    </dependency>

                    <!--<dependency>-->
                        <!--<groupId>org.mybatis</groupId>-->
                        <!--<artifactId>mybatis</artifactId>-->
                        <!--<version>3.5.2</version>-->
                    <!--</dependency>-->
                    <dependency>
                        <groupId>org.mybatis.generator</groupId>
                        <artifactId>mybatis-generator-core</artifactId>
                        <version>1.3.7</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>Generate MyBatis Artifacts</id>
                        <phase>package</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!--允许移动生成的文件 -->
                    <verbose>true</verbose>
                    <!-- 是否覆盖:一定是 false 避免覆盖他人代码 -->
                    <overwrite>false</overwrite>
                    <!-- 自动生成的配置 -->
                    <configurationFile>src/main/resources/generatorConfig.xml</configurationFile>
                </configuration>
            </plugin>
        </plugins>
        <resources>
            <!--注意会导致难以发现的问题，关于 xml 文件的扫描-->
            <!--此处的配置是识别到mapper.xml文件，也可以在application.properties中配置-->
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
            </resource>
        </resources>
    </build>

</project>
